class Person:
    def __init__(self, name : str = "Jonatan"):
        # Конструктор класса Person, инициализирует атрибуты name и age.
        # Параметр name имеет тип str и значение по умолчанию "Jonatan".
        self.__name = name
        # Приватный атрибут __name, хранит имя человека.
        self.__age = 0
        # Приватный атрибут __age, хранит возраст человека (инициализируется нулем).
        # print(f"Создан {self.__name}")

    def __del__(self):
        # Деструктор класса Person, вызывается при удалении объекта.
        pass
        # pass используется для указания, что деструктор ничего не делает.
        # print(f"Удален {self.__name}")

    @property
    def name(self) -> str:
        # Геттер для атрибута name. Возвращает имя человека.
        return self.__name
        # Возвращает значение приватного атрибута __name.

    @property
    def age(self) -> int:
        # Геттер для атрибута age. Возвращает возраст человека.
        return self.__age
        # Возвращает значение приватного атрибута __age.

    @age.setter # Сеттеры могут быть объявлены ТОЛЬКО после объявления свойств
    def age(self, new_age : int):
        # Сеттер для атрибута age. Устанавливает возраст человека.
        # Параметр new_age имеет тип int и представляет новый возраст.
        if new_age > 0 and new_age < 110:
            # Проверяет, что new_age находится в диапазоне от 0 до 110.
            self.__age = new_age
            # Устанавливает значение приватного атрибута __age равным new_age, если проверка прошла.

    def say_hello(self) -> str:
        # Метод класса Person, возвращает приветствие с именем и возрастом человека.
        return f"Hello, my name is {self.__name}! I am {self.__age} years old"
        # Форматирует строку с использованием f-строки, вставляя значения __name и __age.